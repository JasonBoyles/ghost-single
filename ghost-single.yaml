heat_template_version: 2013-05-23

description: |
  This is a Heat template to deploy a single Linux server running Ghost CMS.

parameter_groups:

- label: Server Settings
  parameters:
  - server_hostname
  - flavor
  - count

- label: Ghost Settings
  parameters:
  - domain
  - username

parameters:

  # Server settings
  server_hostname:
    description: Server Name
    type: string
    default: Ghost
    constraints:
    - length:
        min: 1
        max: 64
    - allowed_pattern: "^[a-zA-Z][a-zA-Z0-9-]*$"
      description: |
        Must begin with a letter and contain only alphanumeric characters.

  flavor:
    description: Rackspace Cloud Server flavor
    type: string
    default: 2 GB Performance
    constraints:
    - allowed_values:
      - 1 GB Performance
      - 2 GB Performance
      - 4 GB Performance
      - 8 GB Performance
      - 15 GB Performance
      - 30 GB Performance
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  # Ghost settings
  domain:
    description: Domain to be used with Ghost site
    type: string
    default: "ghost.example.com"
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name

  # Database and system user configuration
  database_name:
    description: Ghost database name
    type: string
    default: ghost
    constraints:
    - allowed_pattern: "^[0-9a-zA-Z$_]{1,64}$"
      description: |
        Maximum length of 64 characters, may only contain letters, numbers, and
        underscores.

  username:
    description: "Login name for both the database and system user"
    type: string
    default: ghost
    constraints:
    - allowed_pattern: "^(.){1,16}$"
      description: |
        Must be shorter than 16 characters, this is due to MySQL's maximum
        username length.

  count:
    description: Number of CoreOS machines to deploy
    type: number
    default: 3
    constraints:
    - range:
        min: 3
        max: 12
      description: Must be between 3 and 12 servers.

resources:
  # Random password generation
  user_password:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  database_password:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  mysql_root_password:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  mysql_repl_password:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  mysql_debian_password:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  # SSH key
  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true

  # Server resources
  ghost_servers:
    type: "OS::Heat::ResourceGroup"
    properties:
      count: { get_param: count }
      resource_def:
        # type: Rackspace::Cloud::Server
        type: OS::Nova::Server
        properties:
          name: { get_param: server_hostname }
          flavor: { get_param: flavor }
          image: "67f12b74-2a3f-4a10-8afd-11bebc914c11"
          key_name: { get_resource: ssh_key }
          user_data_format: RAW
          config_drive: "true"
          user_data: |
            #cloud-config

            coreos:
              update:
                reboot-strategy: etcd-lock
              etcd:
                # generate a new token for each unique cluster from https://discovery.etcd.io/new
                discovery: https://discovery.etcd.io/<token>
                addr: $private_ipv4:4001
                peer-addr: $private_ipv4:7001
              units:
                - name: etcd.service
                  command: start
                - name: fleet.service
                  command: start
                - name: docker-ghost.service
                  command: start
                  content: |
                    [Unit]
                    Description=ghost container
                    Author=coreos
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    Restart=always
                    ExecStart=/usr/bin/docker run --name ghost -p 80:2368 dockerfile/ghost
                    ExecStop=/usr/bin/docker stop -t 2 ghost

                    [Install]
                    WantedBy=multi-user.target

outputs:
  private_key:
    value: { get_attr: [ssh_key, private_key] }
    description: "Private Key"

  server_ips:
    value: { get_attr: [ghost_servers, accessIPv4] }
    description: "Server IPs"

  ghost_user:
    value: { get_param: username }
    description: "Ghost User"

  ghost_user_password:
    value: { get_attr: [user_password, value] }
    description: "Ghost Password"

  ghost_database_password:
    value: { get_attr: [database_password, value] }
    description: "Ghost Database Password"

  mysql_root_password:
    value: { get_attr: [mysql_root_password, value] }
    description: "MySQL Root Password"
